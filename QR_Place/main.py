from PIL import Image, ImageDraw
import qrcode
import os

def find_empty_corner(image_path, qr_size=(100, 100), margin=20):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image = Image.open(image_path)
    width, height = image.size
    qr_width, qr_height = qr_size
    
    print(f"üìê –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {width}x{height}")
    print(f"üìè –†–∞–∑–º–µ—Ä QR-–∫–æ–¥–∞: {qr_width}x{qr_height}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º 4 —É–≥–ª–∞ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
    corners = [
        (margin, margin),  # –≤–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π
        (width - qr_width - margin, margin),  # –≤–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π
        (margin, height - qr_height - margin),  # –Ω–∏–∂–Ω–∏–π –ª–µ–≤—ã–π
        (width - qr_width - margin, height - qr_height - margin)  # –Ω–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π
    ]
    
    corner_names = [
        "–í–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π",
        "–í–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π", 
        "–ù–∏–∂–Ω–∏–π –ª–µ–≤—ã–π",
        "–ù–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π"
    ]

    empty_corners = [(None,None),(None,None),(None,None),(None,None)]
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —É–≥–æ–ª –Ω–∞ "–ø—É—Å—Ç–æ—Ç—É"
    for i, (x, y) in enumerate(corners):
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {corner_names[i]} —É–≥–æ–ª: ({x}, {y})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–∞–ª–∏–¥–Ω—ã
        if x < 0 or y < 0 or x + qr_width > width or y + qr_height > height:
            print(f"‚ùå –£–≥–æ–ª –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–ª–∞—Å—Ç—å –Ω–∞ –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ—Å—Ç—å (–ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        if is_area_empty(image, x, y, qr_width, qr_height):
            print(f"‚úÖ {corner_names[i]} —É–≥–æ–ª –ø–æ–¥—Ö–æ–¥–∏—Ç!")
            empty_corners[i]=corners[i]
        else:
            print(f"‚ùå {corner_names[i]} —É–≥–æ–ª –∑–∞–Ω—è—Ç")
    
    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —É–≥–æ–ª –Ω–µ –ø–æ–¥–æ—à–µ–ª
    if empty_corners[0]=="None":
        print("‚ö†Ô∏è  –í—Å–µ —É–≥–ª—ã –∑–∞–Ω—è—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª")
        return corners[0]
    # –í—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    else: print("‚ö† –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–±–æ–¥–Ω—ã–π —É–≥–æ–ª:\n")
    for i, (x, y) in enumerate(empty_corners):
        if x or y != None:
            print(f'{i}.:{corner_names[i]}\n')
    print("\n–õ—é–±–æ–π, –Ω–∞–∂–º–∏—Ç–µ enter")
    scen = input()
    for i, (x, y) in enumerate(empty_corners):
        if scen==str(i):
            return x,y
    

def is_area_empty(image, x, y, width, height, color_variance=50):
    
    # –í—ã—Ä–µ–∑–∞–µ–º –æ–±–ª–∞—Å—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    area = image.crop((x, y, x + width, y + height))
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if area.mode != 'RGB':
        area = area.convert('RGB')
    
    pixels = list(area.getdata())
    
    if not pixels:
        return True
    
    avg_color = (
        sum(p[0] for p in pixels) // len(pixels),
        sum(p[1] for p in pixels) // len(pixels),
        sum(p[2] for p in pixels) // len(pixels)
    )
    
    color_variations = []
    for pixel in pixels[::10]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π 10-–π –ø–∏–∫—Å–µ–ª—å –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        variation = sum(abs(pixel[i] - avg_color[i]) for i in range(3))
        color_variations.append(variation)
    
    avg_variation = sum(color_variations) / len(color_variations)
    
    print(f"   –°—Ä–µ–¥–Ω—è—è –≤–∞—Ä–∏–∞—Ü–∏—è —Ü–≤–µ—Ç–∞: {avg_variation:.1f}")
    
    # –ï—Å–ª–∏ —Å—Ä–µ–¥–Ω—è—è –≤–∞—Ä–∏–∞—Ü–∏—è –º–µ–Ω—å—à–µ –ø–æ—Ä–æ–≥–∞ - —Å—á–∏—Ç–∞–µ–º –æ–±–ª–∞—Å—Ç—å –ø—É—Å—Ç–æ–π
    return avg_variation < color_variance

def generate_qr_code(data, size=(100, 100)):
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=10,
        border=4,
    )
    qr.add_data(data)
    qr.make(fit=True)
    
    qr_image = qr.make_image(fill_color="black", back_color="white")
    qr_image = qr_image.resize(size, Image.Resampling.LANCZOS)
    
    return qr_image

def place_qr_in_corner(image_path, qr_data, output_path="result.jpg"):
    print("üé® –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    
    try:
        base_image = Image.open(image_path)
        print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {image_path}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None
    
    qr_position = find_empty_corner(image_path)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
    qr_image = generate_qr_code(qr_data)
    print("‚úÖ QR-–∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è QR-–∫–æ–¥–∞
    result_image = base_image.copy()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω –ø–æ–¥ QR-–∫–æ–¥ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    white_bg = Image.new('RGB', qr_image.size, 'white')
    mask = Image.new('L', qr_image.size, 255)
    
    # –†–∞–∑–º–µ—â–∞–µ–º QR-–∫–æ–¥
    result_image.paste(white_bg, qr_position)
    result_image.paste(qr_image, qr_position, mask)
    
    result_image.save(output_path)
    print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
    print(f"üìç QR-–∫–æ–¥ —Ä–∞–∑–º–µ—â–µ–Ω –≤ –ø–æ–∑–∏—Ü–∏–∏: {qr_position}")
    
    return result_image

def create_test_image():
    print("üñºÔ∏è –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
    
    img = Image.new('RGB', (800, 600), color='lightblue')
    draw = ImageDraw.Draw(img)
    draw.rectangle([650, 10, 790, 150], fill='red', outline='darkred')
    
    draw.ellipse([10, 450, 150, 590], fill='green', outline='darkgreen')

    draw.ellipse([300, 200, 500, 400], fill='orange', outline='darkorange')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    img.save('test_image.jpg')
    print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: test_image.jpg")
    
    return 'test_image.jpg'

def main():
    test_image_path = 'test_image.jpg'
    qr_data = "https://example.com/invite/unique-code-12345"
    result = place_qr_in_corner('image.jpg', qr_data, "qr_result.jpg")
    
    if result is not None:
        print("\nüéâ –ì–æ—Ç–æ–≤–æ! QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω!")
        
        result_size = result.size
        print(f"üìê –†–∞–∑–º–µ—Ä –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {result_size[0]}x{result_size[1]}")
    else:
        print("\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")

if __name__ == "__main__":
    main()